Android（23）  
android:windowSoftInputMode
activity主窗口与软键盘的交互模式，可以用来避免输入法面板遮挡问题，Android1.5后的一个新特性。
这个属性能影响两件事情：
【一】当有焦点产生时，软键盘是隐藏还是显示
【二】是否减少活动主窗口大小以便腾出空间放软键盘
它的设置必须是下面列表中的一个值，或一个”state…”值加一个”adjust…”值的组合。在任一组设置多个值——多个”state…”values，例如＆mdash有未定义的结果。各个值之间用|分开。例如:<activity Android:windowSoftInputMode="stateVisible|adjustResize". . . >

在这设置的值(除"stateUnspecified"和"adjustUnspecified"以外)将覆盖在主题中设置的值


各值的含义：
【A】stateUnspecified：软键盘的状态并没有指定，系统将选择一个合适的状态或依赖于主题的设置
【B】stateUnchanged：当这个activity出现时，软键盘将一直保持在上一个activity里的状态，无论是隐藏还是显示
【C】stateHidden：用户选择activity时，软键盘总是被隐藏
【D】stateAlwaysHidden：当该Activity主窗口获取焦点时，软键盘也总是被隐藏的
【E】stateVisible：软键盘通常是可见的
【F】stateAlwaysVisible：用户选择activity时，软键盘总是显示的状态
【G】adjustUnspecified：默认设置，通常由系统自行决定是隐藏还是显示
【H】adjustResize：该Activity总是调整屏幕的大小以便留出软键盘的空间
【I】adjustPan：当前窗口的内容将自动移动以便当前焦点从不被键盘覆盖和用户能总是看到输入内容，任何形式的转载都请联系作者获得授权并注明出处。


Activity有四种加载模式：

standard 
singleTop 
singleTask
 singleInstance

配置加载模式的位置在AndroidManifest.xml文件中activity元素的launchMode属性：
<activity android:launchMode** ="singleTask"/>

standard
standard模式，也就是默认模式，不需要配置launchMode。就是每次跳转时都需要创建该Activity的新实例，点击返回键，可以看到的是按照刚才创建Activity实例的倒序依次出现，类似退栈的操作，而刚才跳转的操作就是压栈的操作。

singleTop


singleTop和standard模式，都会将intent发送新的实例（后两种模式不发送到新的实例，如果已经有了的话）。不过，singleTop要求如果创建intent的时候栈顶已经有要创建的Activity的实例，则将intent发送给该实例，而不发送给新的实例。
1、如果要跳转的Activity位于栈顶，则不创建新实例，否则创建新的实例位于栈顶。

（1）SingleTop模式和standard模式非常相似，主要区别就是当一个singleTop模式的Activity已经位于任务栈的栈顶，再去启动它时，不会再创建新的实例,如果不位于栈顶，就会创建新的实例

;
（2）当一个Activity已经在栈顶，但依然有可能启动它，而你又不想产生新的Activity实例，此时就可以用singleTop模式。例如，一个搜索Activity，可以输入搜索内容，也可以产生搜索结果，此时就可以用singleTop模式，这样用户每次搜索就不会每次都产生一个实例。

singleTask


singleTask模式和后面的singleInstance模式都是只创建一个实例的。
当intent到来，需要创建singleTask模式Activity的时候，系统会检查栈里面是否已经有该Activity的实例。如果有直接将intent发送给它。
当一个Activity被设置为singletask时

（1）它并没有创建新的任务栈（TaskId都是一样的）

（2）如果它已经存在于栈中，再次请求触发此Activity时，会调用此类实例的onNewIntent方法，不会重新创建新的实例

（3）如果此类所在的任务栈上面有其它Activity，那么其它的Activity会被销毁
（4）singleTask模式和前面两种模式的最大区别就是singleTask模式是任务内单例的，所以我们是否设定Activity为singleTask模式，就是看我们activity是否需要单例，例如你的某个Activity

singleInstance

当一个Activity被设置为singleinstance时

（1）如果此Activity没有实例，它会创建一个新的任务栈。（两个TaskId不一样）

（2）如果任务栈中已经有此实例，会调用onNewIntent方法，不会创建新的任务栈和实例

（3）独立成Taskstack ，并且有且仅有你自己。而且始终保持一个实例离栈的时候 ， 先退当前的task ，再退另外的task



（4）singleInstance模式也是单例的，但和singleTask不同，singleTask只是任务栈内单例，系统里是可以有多个singleTask Activity实例的，而singleInstance Activity在整个系统里只有一个实例，启动一singleInstanceActivity时，系统会创建一个新的任务栈，并且这个任务栈只有他一个Activity。

（5）SingleInstance模式并不常用，如果我们把一个Activity设置为singleInstance模式，你会发现它启动时会慢一些，切换效果不好，影响用户体验。它往往用于多个应用之间，例如一个电视launcher里的Activity，通过遥控器某个键在任何情况可以启动，这个Activity就可以设置为singleInstance模式，当在某应用中按键启动这个Activity，处理完后按返回键，就会回到之前启动它的应用，不影响用户体验。